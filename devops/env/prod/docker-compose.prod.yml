version: '3.8'
services:
  nginx-front:
    container_name: mean_stack_container_front_web
    build:
      context: ../../docker/images/nginx
      dockerfile: Dockerfile.ProdNginxFront
    restart: always
    volumes:
      - ../../../front-web/web-build:/usr/share/nginx/html/:z,ro
#       see https://github.com/matomo-org/matomo-nginx
      - ../../docker/conf/nginx/nginx-front.conf:/etc/nginx/conf.d/default.conf:z,ro
#   ports:
#     - 80:80
    networks:
      - MyMeanStackNetwork
      - TraefikGlobalProxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=TraefikGlobalProxy"
      - "traefik.http.routers.nginx-front-secure.entrypoints=websecure"
      - "traefik.http.routers.nginx-front-secure.rule=Host(`${NGINX_FRONT_URL}`)"
      - "traefik.http.routers.nginx-front-secure.service=nginx-front"
      - "traefik.http.services.nginx-front.loadbalancer.server.port=${NGINX_FRONT_PORT}"			
  back:
    container_name: mean_stack_container_backend
    build:
      context: ../../../backend
      dockerfile: ../devops/docker/images/express/Dockerfile.Prod
      args:
        BACKEND_PORT: ${BACKEND_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - INSTANCES_NUM=${INSTANCES_NUM}
      - BACKEND_PORT=${BACKEND_PORT}
      - BACKEND_URL=${BACKEND_URL}
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
#     - DATABASE_SSL=${DATABASE_SSL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - FOREST_AUTH_SECRET=${FOREST_AUTH_SECRET}
      - FOREST_ENV_SECRET=${FOREST_ENV_SECRET} 
      - CRYPTO_SECRET=${CRYPTO_SECRET}
      - SECRET_JWT=${SECRET_JWT}
      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_SUBJECT=${MAIL_SUBJECT}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - OAUTH2_CLIENT_ID=${OAUTH2_CLIENT_ID}
      - OAUTH2_CLIENT_SECRET=${OAUTH2_CLIENT_SECRET}
      - OAUTH2_REDIRECT_URI=${OAUTH2_REDIRECT_URI}
      - OAUTH2_REFRESH_TOKEN=${OAUTH2_REFRESH_TOKEN}
      - ELASTIC_APM_SERVICE_NAME=${ELASTIC_APM_SERVICE_NAME}
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
#   ports:
#     - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ../../../backend/:/src
      - node_modules_backend:/src/node_modules
    networks:
      - MyMeanStackNetwork
      - MongoDBNetwork
      - TraefikGlobalProxy
    depends_on: 
      - mongodb  
      - redis
#     - elasticsearch:
#         condition: service_started
#     - apm-server:
#         condition: service_started 
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=TraefikGlobalProxy"
      - "traefik.http.routers.back-secure.entrypoints=websecure"
      - "traefik.http.routers.back-secure.rule=Host(`${BACKEND_URL}`)"
      - "traefik.http.routers.back-secure.service=back"
      - "traefik.http.services.back.loadbalancer.server.port=${BACKEND_PORT}"
#     - "traefik.http.routers.back-secure.middlewares=ipwhitelist-for-socializus-tools@file"	     
  redis:
    container_name: mean_stack_container_redis
    image: redis:6.2-alpine
    restart: always
    environment:
 #    - REDIS_PASSWORD=${REDIS_PASSWORD}
 #      ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=no
 #    - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
 #  ports:
 #    - '6379:6379'
 #  entrypoint: redis-server --appendonly yes
    command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - redis-cache:/data
    networks:
      - TraefikGlobalProxy
      - MyMeanStackNetwork
      - MongoDBNetwork     
  mongodb:
    container_name: mean_stack_container_mongodb
    image: mongo:6.0
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB_ADMIN_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_ADMIN_PASSWORD}
      - MONGO_INITDB_CUSTOM_DATABASE=${MONGO_CUSTOM_DB}
      - MONGO_INITDB_CUSTOM_USERNAME=${MONGO_DB_CUSTOM_USERNAME}
      - MONGO_INITDB_CUSTOM_PASSWORD=${MONGO_DB_CUSTOM_PASSWORD}
    volumes:
#     seeding scripts
      - ../../docker/script/mongodb/mongo-entrypoint:/docker-entrypoint-initdb.d
#     named volumes
      - mongodb:/data/db
      - mongoconfig:/data/configdb
    networks:
      - MongoDBNetwork
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=MongoDBNetwork"
      - "traefik.http.routers.mongodb-secure.entrypoints=websecure"
      - "traefik.http.routers.mongodb-secure.rule=Host(`${MONGODB_URL}`)"
      - "traefik.http.routers.mongodb-secure.service=mongodb"
      - "traefik.http.services.mongodb.loadbalancer.server.port=${MONGODB_PORT}"
      - "traefik.http.routers.mongodb-secure.middlewares=ipwhitelist-for-socializus-tools@file"  
  mongo-backup:
    image: 'cyb3rko/mongodb-backup:latest'
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=${MONGODB_PORT}        
      - MONGODB_USER=${MONGO_DB_ADMIN_USERNAME}
      - MONGODB_PASS=${MONGO_DB_ADMIN_PASSWORD}
      - MONGODB_DB=${MONGO_DB_CUSTOM_DATABASE}
      - CRON_TIME="0 0 * * *"    
      - INIT_BACKUP="true"          # See the list of backups, you can run: docker exec cyb3rko/mongodb-backup ls /backup
      - MAX_BACKUPS="7"             # To restore database from a certain backup, simply run: docker exec cyb3rko/mongodb-backup /restore.sh /backup/2015.08.06.171901
    volumes:
      - /host/backup:/backup    # Replace '/host/backup' with your backup folder path          
volumes:
# default dir on Ubuntu: /var/lib/docker/volumes
  mongodb:
  mongoconfig:	
  redis-cache:
  node_modules_backend: {}		
networks:
  MySocializusNetwork:
    driver: bridge
  TraefikGlobalProxy:
    external: true	
  MongoDBNetwork:
    ipam:
      config:
        - subnet: 172.20.0.0/16 
  
